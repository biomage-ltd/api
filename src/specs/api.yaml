openapi: 3.0.0
info:
  title: API
  version: 1.0.0
  description: The main Node.js pipeline API.
  license:
    name: MIT
  contact:
    name: Marcell Pek
    email: marcell@biomage.net
  termsOfService: 'https://opensource.org/licenses/MIT'
servers:
  - url: /v1
tags:
  - name: experiments
    description: Manage your experiments and experiment details.
  - name: heartbeat
    description: API health checks.
  - name: work
    description: Submitting and receiving work.
paths:
  /health:
    get:
      tags:
        - heartbeat
      summary: API health check
      operationId: checkHealth
      x-eov-operation-id: 'health#check'
      x-eov-operation-handler: routes/health
      responses:
        '200':
          description: API is up
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    pattern: up
                  env:
                    type: string
                    enum:
                      - development
                      - test
                      - staging
                      - production
                  clusterEnv:
                    type: string
                    enum:
                      - development
                      - test
                      - staging
                      - production
      description: Returns a status on the health of the API.
  /workResults:
    post:
      operationId: receiveWork
      x-eov-operation-id: 'work#response'
      x-eov-operation-handler: routes/work
      requestBody:
        description: The data sent by AWS SNS.
        required: true
        content:
          text/plain:
            schema:
              type: string
            examples: {}
          application/json:
            schema:
              type: object
              properties: {}
            examples: {}
      responses:
        '200':
          description: 'A JSON-parseable was received by the server, *irrespective of whether it was correct/acceptable or not*.'
          content:
            text/plain:
              schema:
                type: string
                pattern: ok
        '500':
          description: The data sent by the server could not be parsed as JSON.
          content:
            text/plain:
              schema:
                type: string
                pattern: nok
      description: |-
        Results from work performed by workers are relayed to the API through this endpoint.

        Note that this endpoint is only exposed to AWS SNS, and since it has a specific communication protocol with limited feedback, the schema defined here is designed to be liberally enforceable. This endpoint is also used by SNS to handle subscribe/unsubscribe events.

        The actual JSON passed by SNS is found in the `WorkResponse` model, which is to be validated by the API.
      summary: Retrieve results from worker
      tags:
        - work
    parameters: []
  '/experiments/{experimentId}':
    get:
      tags:
        - experiments
      summary: Look up experiment by ID
      description: Returns the main details of the experiment.
      operationId: getExperimentById
      x-eov-operation-id: 'experiment#findByID'
      x-eov-operation-handler: routes/experiment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
              examples:
                example-1: {}
        '400':
          description: Invalid ID supplied
        '404':
          description: Experiment not found
    parameters:
      - schema:
          type: string
        name: experimentId
        in: path
        required: true
        description: ID of the experiment to find.
  '/experiments/{experimentId}/cellSets':
    get:
      tags:
        - experiments
      summary: Retrieve cell sets
      description: Returns a hirearchical view of cell sets in the experiment.
      operationId: getExperimentCellSetsById
      x-eov-operation-id: 'experiment#getCellSets'
      x-eov-operation-handler: routes/experiment
      responses:
        '200':
          description: 'Fetch successful, response below.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cell_sets:
                    type: array
                    items:
                      $ref: '#/components/schemas/CellSets'
        '404':
          description: Experiment not found
    parameters:
      - name: experimentId
        in: path
        description: ID of experiment to find cell sets of.
        required: true
        schema:
          type: string
    put:
      summary: ''
      operationId: updateExperimentCellSetsById
      x-eov-operation-id: 'experiment#updateCellSets'
      x-eov-operation-handler: routes/experiment
      responses:
        '200':
          description: Update to object in response successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/CellSets'
      description: Updates the cell set information in the database with a modified tree.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/CellSets'
  '/experiments/{experimentId}/plots-tables/{plotUuid}':
    parameters:
      - schema:
          type: string
        name: plotUuid
        in: path
        required: true
      - schema:
          type: string
        name: experimentId
        in: path
        required: true
    put:
      summary: ''
      operationId: updatePlotTable
      x-eov-operation-id: 'plots-tables#update'
      x-eov-operation-handler: routes/plots-tables
      responses:
        '200':
          description: Update to object in response successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlotTableConfig'
        '201':
          description: New resource created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlotTableConfig'
        '404':
          description: Invalid experiment ID specified.
      description: Updates a plot and table for a given experiment with the data specified.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlotTableConfig'
        description: The new configuration to update the old one by.
    get:
      summary: ''
      operationId: getPlotTable
      x-eov-operation-id: 'plots-tables#read'
      x-eov-operation-handler: routes/plots-tables
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlotTableConfig'
      description: Reads a plot and table for a given experiment with the data specified.
    delete:
      summary: ''
      operationId: deletePlotTable
      x-eov-operation-id: 'plots-tables#delete'
      x-eov-operation-handler: routes/plots-tables
      responses:
        '200':
          description: OK
      description: Deletes a plot and table for a given experiment with the data specified.
components:
  securitySchemes: {}
  schemas:
    Experiment:
      type: object
      required:
        - experimentId
        - experimentName
      properties:
        experimentId:
          type: string
        experimentName:
          type: string
    ApiResponse:
      type: object
      required:
        - code
        - type
        - message
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    CellSets:
      type: object
      title: ''
      properties:
        key:
          type: string
          format: int32
        name:
          type: string
        rootNode:
          type: boolean
        children:
          type: array
          items:
            $ref: '#/components/schemas/CellSets'
      required:
        - key
        - name
    WorkResponse:
      title: WorkResponse
      type: object
      description: This is the format the workers communicate the results of the work they completed back to the API. The API is then responsible for transforming this data and returning it back to the clients.
      properties:
        results:
          type: array
          description: The results of the work
          items:
            type: object
            description: The results of the work
            properties:
              content-type:
                type: string
                example: application/json
                description: The MIME type of the work completed.
              type:
                type: string
                description: The type of content found in the `body`.
                enum:
                  - inline
                  - s3-path
              body:
                type: string
                description: The work result in the format specified by `content-type` and `type`.
              content-encoding:
                type: string
                default: utf-8
                description: The encoding used with the binary value received.
            required:
              - content-type
              - type
              - body
        request:
          $ref: '#/components/schemas/WorkRequest'
        response:
          type: object
          required:
            - cacheable
            - error
          properties:
            cacheable:
              type: boolean
              description: Whether the result should be cached.
            error:
              type: boolean
              description: "Whether there's been an error."
      required:
        - results
        - response
    ApiError:
      title: ApiError
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
      required:
        - message
        - errors
    WorkRequest:
      title: WorkRequest
      type: object
      description: This is the schema for the event emitted by the UI when certain work is requested from the API/workers.
      properties:
        uuid:
          type: string
          format: uuid
          description: A UUID generated by the client submitting the work. Will be used to map `WorkResponse` objects to the request submitted.
        socketId:
          type: string
          description: The connection ID of the socket the client is using. The API will send the result back to the ID specified in this parameter.
        timeout:
          type: string
          format: date-time
          description: 'The timeout parameter set by the client. While processing work, all work items whose timeout field is past the current time will be discarded along the work processing chain.'
        experimentId:
          type: string
          description: The ID of the experiment for which this work was created.
        body:
          $ref: '#/components/schemas/WorkRequestBodies'
        pagination:
          type: object
          description: |-
            Lazy-load results instead of return all results at once.

            If this object exists in the `WorkRequest`, the response returned will contain the response number given in `responseKey` to be ordered according to the pagination parameters.

            For `pagination` to work, the response given in `responseKey` must be tabular data loaded as a list of objects, where each object corresponds to a row in a table.
          properties:
            orderBy:
              type: string
              description: The column to order by.
            orderDirection:
              type: string
              enum:
                - ASC
                - DESC
              description: The direction of the ordering.
            offset:
              type: integer
              minimum: 0
              description: The starting position to start loading from.
            limit:
              type: integer
              minimum: 0
              description: The number of items to return.
            responseKey:
              type: integer
              minimum: 0
              description: The response to apply pagination to.
            filters:
              type: array
              items:
                anyOf:
                  - description: 'Filter column by value (minimum and maximum). Useful for numeric values, e.g. filtering on `pvalue`/`qvalue`.'
                    properties:
                      columnName:
                        type: string
                        description: The column name the filter is applied to.
                      type:
                        type: string
                        pattern: numeric
                        description: The type of filter. Must be `numeric` for this type of filter.
                      min:
                        type: number
                        description: The minimum (inclusive) value that will be shown of a given column name.
                        default: 'null'
                      max:
                        type: number
                        description: The maximum (inclusive) value that will be shown of a given column name.
                        default: 'null'
                    required:
                      - columnName
                      - type
                  - description: Filter column by text (w/ wildcards). Useful for string-based filters.
                    properties:
                      columnName:
                        type: string
                        description: The name of the column the filter will be applied to.
                      type:
                        type: string
                        description: The type of filter. Must be `text` for this type of filter.
                        pattern: text
                      expression:
                        type: string
                        description: The wildcarded text to filter by.
                    required:
                      - columnName
                      - type
                      - expression
                type: object
          required:
            - orderBy
            - orderDirection
            - offset
            - limit
      required:
        - uuid
        - socketId
        - timeout
        - experimentId
        - body
    WorkSchemaGetEmbedding:
      title: WorkSchemaGetEmbedding
      type: object
      description: ''
      properties:
        name:
          type: string
          example: GetEmbedding
          description: The name of this work -- must be `GetEmbedding`.
        type:
          type: string
          enum:
            - pca
            - tsne
            - umap
          description: The type of embedding to compute.
      required:
        - name
        - type
    WorkSchemaListGenes:
      title: WorkSchemaListGenes
      type: object
      description: ''
      properties:
        name:
          type: string
          pattern: ListGenes
          description: The name of the work submitted. Should be `ListGenes`.
        selectFields:
          type: array
          minItems: 1
          description: An array of fields to return as a result.
          items:
            type: string
        orderBy:
          type: string
          description: What field to order the results by.
        orderDirection:
          type: string
          pattern: '^(asc)|(desc)|(ASC)|(DESC)$'
          description: 'The direction of the ordering (ASC, DESC)'
        offset:
          type: integer
          minimum: 0
          description: Which element of the query view to start returning results from.
        limit:
          type: integer
          minimum: 0
          description: How many results to return.
        geneNamesFilter:
          type: string
          description: The pattern by which to filter the names of the genes to return.
      required:
        - name
        - selectFields
        - orderBy
        - orderDirection
        - offset
        - limit
    WorkSchemaDifferentialExpression:
      title: WorkSchemaDifferentialExpression
      type: object
      description: |-
        Runs differential expression between two sets of cells. The functional behavior of this task shall be as follows:

        (1) The cells in the experiment should be subset by the cell set specified in `basis`. Differential expression should only be run on cell that are in the `basis` cell set.
        (2) Differential expression should be run on two cell sets, as specified in `cellSet` and `compareWith`.
      properties:
        name:
          type: string
          description: The name of this work -- must be `DifferentialExpression`.
          pattern: DifferentialExpression
        basis:
          type: string
          description: |-
            The cell set for preliminary selection of cells to compare.

            This must be a valid UUID of a cell set as found in DynamoDB. All operations in `DifferentialExpression` will only consider cells that are found in this cell set.

            If not specified, no preliminary selection is done and the entire experiment is used as a basis for computation.
        cellSet:
          type: string
          description: The first cell set differential expression is run on. This must be a valid UUID of a cell set as found in DynamoDB.
        compareWith:
          type: string
          description: |-
            The second cell set to compare against. This may be another cell set UUID, `rest`, or `background`.

            If it is a UUID, the comparison is made between the UUID in `cellSet` and the UUID specified here.

            If it is `rest`, the comparison is made between the UUID in `cellSet` and all remaning cells under the same cell set hierarchy (e.g. scratchpad).

            If it is `background`, the comparison is made between the UUID in `cellSet` and all other cells in the experiment.
        maxNum:
          type: integer
          description: 'The top number of genes to return ordered by the `zScore`. If blank, all genes are returned.'
      required:
        - name
        - cellSet
        - compareWith
    WorkResponseGeneExpression:
      title: WorkResponseGeneExpression
      type: object
      description: The response schema for the `GeneExpression` task.
      properties:
        cells:
          type: array
          description: 'The list of cells that the expression data corresponds to. The cell list order is pre-determined, that is, if cell A comes before cell B in one response, A will always come before B in all responses.'
          items:
            type: string
        data:
          type: array
          description: The expression data.
          items:
            type: object
            properties:
              geneName:
                type: string
                description: The name of the gene for which the data was requested.
              expression:
                type: array
                description: 'The array of expression values, raw or scaled, depending on the setting.'
                items:
                  type: number
            required:
              - geneName
              - expression
        min:
          type: number
          description: The minimum expression value of that gene
        max:
          type: number
          description: The maximum expression value of that gene
        mean:
          type: number
          description: The mean expression value of that gene
        stdev:
          type: number
          description: The standard deviation of the expression value of that gene
      required:
        - cells
        - data
        - min
        - max
        - mean
        - stdev
    WorkSchemaGeneExpression:
      title: WorkSchemaGeneExpression
      type: object
      properties:
        name:
          type: string
          description: The name of this task. Must be `GeneExpression`.
          pattern: GeneExpression
        genes:
          type: array
          description: A list of genes to compute expression data for.
          items:
            type: string
        scale:
          type: boolean
          description: Whether to perform feature scaling (normalization to unit variance and zero mean). Defaults to `false` if not specified.
          default: 'false'
      required:
        - name
        - genes
    WorkRequestBodies:
      oneOf:
        - $ref: '#/components/schemas/WorkSchemaGetEmbedding'
        - $ref: '#/components/schemas/WorkSchemaListGenes'
        - $ref: '#/components/schemas/WorkSchemaDifferentialExpression'
        - $ref: '#/components/schemas/WorkSchemaGeneExpression'
        - $ref: '#/components/schemas/WorkSchemaClusterCells'
      title: WorkRequestBodies
      description: Valid work request bodies.
    PlotTableConfig:
      title: PlotTableConfig
      type: object
      description: A file specifying the configuration for a given plot/table.
      properties:
        experimentId:
          type: string
          description: The ID of the experiment.
        plotUuid:
          type: string
          description: The UUID of the plot or table.
        type:
          type: string
          description: The type of the plot to be saved. Can be one of the values specified herein.
          enum:
            - embeddingCategorical
            - embeddingContinuous
            - volcano
            - heatmap
        config:
          type: object
      required:
        - type
        - config
    WorkSchemaClusterCells:
      title: WorkSchemaClusterCells
      type: object
      properties:
        name:
          type: string
          description: Name of the work. Must be `ClusterCells`.
          pattern: ClusterCells
        cellSetName:
          type: string
          description: The name under which the cell set group should be saved.
        params:
          type: object
        type:
          type: string
          description: The type of clustering algorithm to use.
          enum:
            - louvain
            - leiden
        cellSetKey:
          type: string
          description: The key under which the cell set should be saved.
      required:
        - name
        - cellSetName
        - type
        - cellSetKey
